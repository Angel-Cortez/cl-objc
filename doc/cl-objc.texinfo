\input texinfo
@setfilename cl-objc
@settitle cl-objc

@c Some plain TeX macrology to wrap text in \hbox{} only if the text
@c contains no hyphens.
@iftex
@tex
\newif\ifdash
\long\def\dashp#1{\expandafter\setnext#1-\dashphelper}
\long\def\setnext#1-{\futurelet\next\dashphelper}
\long\def\dashphelper#1\dashphelper{
  \ifx\dashphelper\next\dashfalse\else\dashtrue\fi
}
\def\lw#1{\leavevmode\dashp{#1}\ifdash#1\else\hbox{#1}\fi}
@end tex
@end iftex

@c A Texinfo binding for the plain TeX above.  Analogous to Texinfo's
@c @w, but for Lisp symbols.  AFAICT, the comment characters are
@c necessary to prevent treating the newline as a space.
@macro lw{word}
@iftex
@tex
\\lw{\word\}%
@end tex
@end iftex
@ifnottex
\word\@c
@end ifnottex
@end macro

@copying
Documentation for the Common Lisp Objective C Interface, version 1.0.

Copyright @copyright{} 2007 Luigi Panzeri

@quotation
Copying and distribution of this file, with or without modification, are
permitted in any medium without royalty provided the copyright notice
and this notice are preserved.
@end quotation
@end copying

@titlepage
@title Common Lisp ObjectiveC Interface

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Common Lisp ObjC Interface Library
 
@insertcopying
@end ifnottex

@menu
* Introduction::                What is CL-ObjC?
* Tutorial::                    Brief Guide to CL-ObjC
* CFFI Bindings::               Using simple wrappers of ObjC FFI
* Lisp Interface::              Writing ObjC application using Common Lisp wrappers
* Reader Macro::                Using the reader macro to write in ObjC style
* CLOS Bindings::               The CLOS bindings to ObjC object system
* Implementation Notes::        
* Index::                       Complete index.

@end menu

@node Introduction
@chapter Introduction

@section What is CL-ObjC?
CL-ObjC is a Common Lisp library whose aim is to allow developers to use
libraries written in the Objective C language, providing a lisp-like
interface towards Objective C conventions.

Actually it is made of four different interfaces, i.e. four different
style to use Objective C libraries in your Common Lisp program.

The first one provided by the package @lw{CL-OBJC} gives to the users
the ability to write application in a Lisp-like way with a functional
interface in order to send message (e.g. call methods) to Objective C
objects. E.g.:

@lisp
(let ((new-string (invoke 'ns-string alloc)))
  (invoke new-string :init-with-utf8-string ``ciao''))

(define-objc-class bank-account ns-object
 ((amount :float)
  (currency currency-type)))

(define-objc-method withdraw ((self bank-account) (withdraw :float))
  (with-ivar-accessors bank-account
    (decf (amount self) withdraw)
    self))
@end lisp

The second one provided by @lw{OBJC-CLOS} expose a CLOS object oriented
interface to Objective C mapping every Objective C class/method to a
CLOS class/method with names interned in a separate @lw{OBJC} package.
So the user can code in a CLOS fashion mixing the strength of both
object systems. Functions to create bindings for custom Objective C
frameworks are provided. E.g.

@lisp
(let ((new-string (make-instance 'objc:ns-string)))
  (init-with-utf8-string? new-string ``ciao''))
@end lisp

The third one provided by the package @lw{OBJC-CFFI} exposes the CFFI
bindings to the user and allows to handle Objective C objects through
Common Lisp objects via the CFFI foreign type translators mechanism. It
is mainly useful when you have to work with C-like construct of
Objective C, like function returning C struct value and so on.

The last one, you can find in the @lw{OBJC-READER} package, provides a
reader macro that allows user to mix ObjectiveC and Common Lisp syntax
just to call Objective C methods. It is designed just to be used for the
sake of convenience from the REPL.

This manual is a work in progress. If you have difficulty using or
comprehending it please contact @email{cl-objc-devel@@common-lisp.net,
the developers} with details.

@section Status
At the moment CL-ObjC has been tested mainly on x86-64 platform on
Darwin with the last stable release of sbcl. CL-ObjC is known also to
work on Allegro 8.1. As CL-ObjC uses CFFI to link with the Objective C
runtime foreign functions, it should not be a problem to use it portably
on other platforms, compilers or OSs. 

@section Download and installation
You can get the current development version of CL-ObjC from the darcs
repository on @uref{http://common-lisp.net/project/cl-objc/darcs/cl-objc/}

CL-ObjC is packaged using the ASDF library, so once downloaded the code
you should change the asdf:*central-registry* parameter to make asdf
find the cl-objc.asd file, or you can make a symbolic link of it in a
directory already in asdf:*central-registry*.

@b{The first time you build CL-ObjC the asdf system will build the bindings
for the standard frameworks present on your system. That operation can
take a long time, until 5 minutes. Loot at the file
generate-framework-bindings.lisp to configure this process.}

To build CL-ObjC you need to get a recent (at least from February 2007)
version of CFFI. You can get the development version from the darcs
repository at @uref{http://common-lisp.net/project/cffi/darcs/cffi/}.

Furthermore CL-ObjC depends on some Common Lisp libraries, namingly

* cl-yacc @*
  http://www.pps.jussieu.fr/~jch/software/files/ @*
  darcs at http://www.pps.jussieu.fr/~jch/software/repos/cl-yacc @*
  asdf-installable 

* closer-mop @*
  http://common-lisp.net/project/closer/ftp/ @*
  darcs at http://common-lisp.net/project/closer/repos/closer-mop 

*  memoize @*
   http://www.common-lisp.net/project/asdf-packaging/memoize-latest.tar.gz @*
   asdf-installable

CL-ObjC is now alsow asdf-installable, so if you have asdf-install (),
you can get it evaling (asdf-install:install 'cl-objc)

In order to work CL-ObjC needs to find the libobjc library. By default
it will search for it in /usr/lib. Change *foreign-library-directories*
if you want to load libobjc from a different path.

To run tests bundled with CL-ObjC you need the FiveAM test unit
software, then you can eval:

@lisp
(asdf:oos 'asdf:load-op 'cl-objc)
(asdf:oos 'asdf:test-op 'cl-objc)
@end lisp

@section Authors 
@enumerate
* @email{nem@@lisp.geek.nz,Geoff Cant}: initial author

* @email{matley@@muppetslab.org, Luigi Panzeri}: main developer
@end enumerate

@section Acknowledgments
Thanks to the @uref{http://www.lispnyc.org,LispNyC} (that approved and
voted for this project) CL-ObjC was funded by Google Inc. in the Summer
of Code of 2007. We thanks also @email{mb@@bese.it, Marco Baringer}
mentor of the project during the SoC. We thank also sbcl guys because
part of this manual has been generated by the SB-TEXINFO software.

@node Tutorial
@chapter Tutorial

@section Quick start
The purpose of CL-ObjC is to allow to use Objective C with Lisp-like
syntax. Actually we can do that with four equivalent way. For the
impatient an ObjC call like:

@verbatim
[my_obj doSomethingCoolAt: now withThisParam 5]
@end verbatim

can be equivalently be executed in CL-ObjC

@itemize

* using the interface provided by the package CL-OBJC :
  @lisp
(invoke my-obj :do-something-cool-at now :with-this-param 5)
  @end lisp

* using CLOS bindings
  @lisp
;; you can alloc new instances with (make-instance 'objc:ns-foo)

(objc:do-something-cool-at?-with-this-param? my-obj now 5)
  @end lisp

* using the low level facility in the package OBJC-CFFI (rarely needed):
  @lisp
; specifying argument types
(typed-objc-msg-send (my-obj "doSomethingCoolAt:withThisParam") 
		     'objc-id now 
		     :int 5)
; without argument types
(untyped-objc-msg-send my-obj 
                       "doSomethingCoolAt:withThisParam" now 5)
  @end lisp

* using the reader macro in the package OBJC-READER :
  @lisp
[my-obj doSomethingCoolAt: now withThisParams 5]
  @end lisp

@end itemize

So every message call can be specified in a typed or untyped way, i.e.
expliciting the CFFI type of the arguments or not, or mixing the two
approach. Actually if types are available the compiler can optimize the
message call. CLOS bindings and the reader macro have to be enabled
before use because they are disabled by default.

@section Loading Frameworks
Once loaded CL-ObjC we can use existing Objective C classes and methods
loading frameworks with the macro @code{OBJC-CFFI:IMPORT-FRAMEWORK}:

@lisp
(import-framework "Foundation")
@end lisp

If you want to enable the CLOS interface you need to set the
@code{OBJC-CLOS:*AUTOMATIC-CLOS-BINDINGS-UPDATE*} to @lw{T} before
loading the framework.

@xref{Variable objc-clos:*automatic-clos-bindings-update*} and
@ref{Macro objc-cffi:import-framework} for details.

@b{Please note that the first time you load CL-ObjC, bindings for standard
Cocoa frameworks will be built. This process can take long time.}
@section Type translations

Objective C types are translated directly into Common Lisp types.
Primitive C types (@code{float}, @code{int}, @code{char *}) are
translated by CFFI in the common way. Struct values as in CFFI are
always managed by a pointer to their data. The specific Objective C
types (like @code{id}) are translated automatically by foreign type
translators into lisp types and viceversa when needed. Several CLOS
classes are added to handle them and custom @lw{PRINT-OBJECT} and
@lw{DESCRIBE-OBJECT} are provided in the OBJC-CFFI package. The
following types translators are installed:


@multitable @columnfractions .33 .33 .33
@item @emph{Objective C type} @tab @emph{Description} @tab @emph{Lisp type}
@item @code{SEL} @tab selectors @tab @code{objc-selector}
@item @code{objc_class} @tab Class description @tab @code{objc-class}
@item @code{id} @tab Instance Object @tab @code{objc-object}
@item @code{objc_method} @tab Method Object @tab @code{objc-method}
@item @code{objc_method_list} @tab List of Methods @tab a list or an objc-method
@item @code{objc_ivar} @tab Instance variable @tab @code{objc-ivar}
@item @code{objc_ivar_list} @tab Instance variable lists @tab @code{objc-ivar-list}
@end multitable

You can also use normal string to specify classes or selectors in the
OBJC-CFFI package and they will be translated to the type needed.

@xref{CLOS Bindings} to read documentation about type translation with
CLOS bindings.

@section Name translators
In the CL-OBJC package you don't specify class and selector by strings
but with symbols. To see how a given ObjC or Lisp name will be
translated by CL-ObjC, you can use the following functions:

@lisp
OBJC-CFFI:OBJC-CLASS-NAME-TO-SYMBOL
OBJC-CFFI:SYMBOL-TO-OBJC-CLASS-NAME
CL-OBJC:OBJC-SELECTOR-TO-SYMBOLS
CL-OBJC:SYMBOLS-TO-OBJC-SELECTOR
@end lisp

So for example the class ``NSObject'' is translated to @lw{NS-OBJECT},
the class ``VeryImportant'' to @lw{VERY-IMPORTANT} and so on. You can
add strings to the special variable @lw{CL-OBJC:*ACRONYMS*} in order to
not espand acronyms like URL into u-r-l.

A selector name can be translated in a list of symbols or a single
symbol depending on the number of parameters. The following examples
explain its behavior:

@table @code
@item [NSObject alloc]
(invoke 'ns-object alloc)

@item [obj setX: 3 Y: 5]
(invoke obj :set-x 3 :y 5)

@item [NSNumber numberWithInt: 3]
(invoke 'ns-number :number-with-int 3)
@end table

@xref{CLOS Bindings} to read documentation about name translations with
CLOS bindings.

@section Utilities
Several macros are present for the sake of convenience. 

@subsection The @code{SLET}, @code{SLET*} macro

The @lw{CL-OBJC:SLET*} and @lw{CL-OBJC:SLET*} macro are used to handle
data stored in structs. They bind variable to new allocated (or not if
you provide a value) structs and provide lisp accessor to their fields.

@lisp
(defun make-rect (x y width height)
  (destructuring-bind (x y width height) 
   (mapcar #'float (list x y width height))
    (slet* ((rect ns-rect)
	    (size ns-size (ns-rect-size rect))
	    (point ns-point (ns-rect-origin rect)))
      (setf (ns-point-x point) x
	    (ns-point-y point) y
	    (ns-size-width size) width
	    (ns-size-height size) height)
      rect))
@end lisp

@xref{Macro cl-objc:slet} for details.

@subsection @code{WITH-OBJECT} and @code{OBJC-LET}
As a common snippet Objective C code pattern is @code{[[MyClass alloc]
initWithParam: param]} it is provided the macros @lw{CL-OBJC:OBJC-LET}
and @lw{CL-OBJC:OBJC-LET*} that binds variables to new allocated and
initialized object.

Another common situation is to call several methods with the same
receiver (e.g. self). For the sake of convenience it is provided the
@lw{CL-OBJC:WITH-OBJECT} macro. So the Objective C code
@example
obj = [ [MyClass alloc] initWithParam: param
[obj methodA]
[obj methodB: param1 C: param2]
[obj methodD: param1]
@end example

becomes in the CL-ObjC syntax:

@lisp
(objc-let ((obj my-class :init-with-param param))
  (with-object obj
    (method-a)
    (:method-b param1)
    (:method-c param1 :c param2)
    (:method-d: param1)))
@end lisp
hw
@xref{Macro cl-objc:objc-let} and @ref{Macro cl-objc:with-object} for details.

@subsection Super Calling
In order to send message to the superclass of an instance of a class the
macro @lw{WITH-SUPER} is provided. @xref{Macro objc-cffi:with-super}.

@section Using Interface Builder: the Currency Converter Example
This section concerns the construction of a Cocoa application using an
UI built with XCode. You can find the instructions to use the Interface
Builder tool to build the interface used in the example at

@url{http://developer.apple.com/documentation/Cocoa/Conceptual/ObjCTutorial/}.

A Cocoa application is usually deployed as a bundle. A bundle is just a
directory containing all the resources (images, sounds, data) the
application needs. Interface Builder saves descriptions of UI in
serialized objects saved in file in the NIB file format stored in the
bundles.

If you follow the instructions of the quoted Cocoa tutorial you will
find in the directory project your bundle, namingly a folder with the
.app extension.

In order to have a Cocoa application using NIB files and integrated with
OSX you have to link your common lisp compiler and a script launching
your Cocoa lisp application into the ``MacOS'' subfolder of your bundle.
Usually the script execute your compiler to load and launch your code.
Otherwise if your lisp implementation supports the creation of a single
binary with the image of your program, you can just copy it in the same
subfolder.

Note that in that script you can create a swank server you can attach to
allowing live debugging of your application@footnote{You can find an
example of this script in the cl-objc bundle}.

Now let's go through the classic Currency Converter example. First of
all, we load the framework we need:

@lisp
(import-framework "Foundation")
(import-framework "AppKit)
(import-framework "Cocoa")
@end lisp

The second import statement binds the variable @code{*nsapp*} to a
static variabile used by the Cocoa framework.

Then we can define the class definitions for the model and for the
controller of the GUI using the DEFINE-OBJC-CLASS macro found in the
CL-OBJC package.
@lisp
(define-objc-class converter ns-object
  ())

(define-objc-class converter-controller ns-object
  ((converter converter)
   (first-currency-field ns-text-field)
   (other-currency-field ns-text-field)
   (rate-field ns-text-field)))
@end lisp

The DEFINE-OBJC-CLASS macro gets three arguments, the name of the class
and of the superclass transformed with the name translators cited
before, and the a list of instance variable definitions. Please note
that you can specify the Objective C class of the instance variable, or
just the ``true'' CFFI value, namingly objc-id.

So the @code{converter-controller} class will be added to the Objective
C runtime class list with the name ``ConverterController'' and defines 4
instance variables with ObjC names: ``converter'',
``firstCurrencyField'', ``otherCurrencyField'', ``rateField''.

Then we can define the methods with the @lw{CL-OBJC:DEFINE-OBJC-METHOD}
macro:

@lisp
(define-objc-method :convert (:return-type :void)
    ((self converter-controller) (sender objc-id))
  (declare (ignore sender))
  (with-ivar-accessors converter-controller
    (let* ((currency (invoke (first-currency-field self) float-value))
	   (rate (invoke (rate-field self) float-value))
	   (amount (invoke (converter self) :convert-currency currency 
                                            :at-rate rate)))
      (invoke (other-currency-field self) :set-float-value amount)
      (invoke (rate-field self) :select-text self))))

(define-objc-method (:convert-currency :at-rate) (:return-type :float)
    ((self converter) (currency :float) (rate :float))
  (* currency rate))
@end lisp

This macro gets 3 arguments plus the body of the method. The name of the
related selector specified with a symbol or a list of symbols, a list of
option and a list of argument definition made of the argument name and
its type. The argument named @lw{SELF} is mandatory and will binded to
the receiver of the message. The body will be evaluated also with the
symbol @lw{SEL} binded to the selector object of the method.

So the second definition in the example define the instance method named
``convertCurrency:atRate:'' returning a :float. It accepts 2 arguments
and it is binded to the class converter.

The @lw{WITH-IVAR-ACCESSORS} macro establishes useful accessors to read
and modify instance variables of ObjectiveC objects.

At last the main entry point of our application looks like:

@lisp
(defun converter ()
  (invoke 'ns-application shared-application)
  (invoke 'ns-bundle 
          :load-nib-named (lisp-string-to-nsstring "MainMenu") 
          :owner *nsapp*)
  (invoke *nsapp* run))
@end lisp

If we activate the reader macro we can specify @code{NSString} object
using the at-sign so @lw{(lisp-string-to-nsstring ``MainMenu'')} becomes
@@"MainMenu''

@node CFFI Bindings
@chapter CFFI Bindings

@section API Reference
@include include/OBJC-CFFI.texinfo

FIXME: exported accessors need documentation too!

@node Lisp Interface
@chapter Lisp Interface

@section API Reference
@include include/CL-OBJC.texinfo

@node Reader Macro
@chapter Reader Macro

@section Introduction
The reader macro allows the user to mix ObjectiveC and Common Lisp code.

When the macro dispatch character ``[`` is readed, then the reader
excepts a symbol naming a class (read preserving case), then selectors
and arguments. Arguments are read using the default Common Lisp
readtable. In order to send methods to instance objects you can use the
``,'' (comma) character to read and eval symbols with the standard
readtable. For the sake of convenience it is provided the @@ (at-sign)
macro that build @var{NSString} objects.

@section API Reference
@include include/OBJC-READER.texinfo

@node CLOS Bindings
@chapter CLOS Bindings

@section Enabling CLOS bindings and creating bindings for Objective C frameworks
If you want to enable the CLOS interface you need to set the
@code{OBJC-CLOS:*AUTOMATIC-CLOS-BINDINGS-UPDATE*} (@xref{Variable
objc-clos:*automatic-clos-bindings-update*} for details) to @lw{T}
before loading the framework.

After setting the variable the call to @code{import-framework} takes few
seconds to load thousands of methods typically included in an Objective
C framework. In order to use non standard or not yet included frameworks
you can use the macro @code{OBJC-CFFI:COMPILE-FRAMEWORK}(@ref{Macro
objc-cffi:compile-framework}) that is able at compile time to collect
informations and generate CLOS classes and methods definitions, saving
them in a compiled form you can load with @code{IMPORT-FRAMEWORK}.

@code{OBJC-CFFI:COMPILE-FRAMEWORK} is also used (see the file
generate-framework-bindings.lisp for details) the first time you load
CL-ObjC when bindings for standard Cocoa framewors are built. This
process can take long time.

If you want at any time sync the CLOS bindings without setting you can
use @code{objc-clos:update-clos-bindings}(@xref{Function
objc-clos:update-clos-bindings} for details).

Tipically in a @code{COMPILE-FRAMEWORK} form you should declare struct
and any function returning struct by value. You can do that with the
macro @code{DEFINE-OBJC-STRUCT} and @code{DEFINE-OBJC-FUNCTION}. Please
note that these macros export the function and struct names and slot
names into the @code{CL-OBJC} package.

@xref{Macro objc-cffi:define-objc-struct} and @ref{Macro
objc-cffi:define-objc-function} for details.

@section Value Translation
If you use the CLOS interface the return value of Objective C calls will
be translated to CLOS instances of the corresponding class using
@lw{CONVERT-RESULT-FROM-OBJC}(@ref{Function
objc-clos:convert-result-from-objc}). So a call to
@lisp
(objc:init-with-utf8-string? s "foo")
@end lisp

returns a new instance of the CLOS class @lw{OBJC:NS-C-F-STRING}
corresponding to the ObjectiveC class @code{NSCFString}.

@section API Reference
@include include/OBJC-CLOS.texinfo

@node Implementation Notes
@chapter Implementation Notes

@section Limits
@enumerate
@include ../KNOWN_BUGS.txt
@end enumerate

@node Index
@unnumbered Index
@printindex vr
@printindex fn
@bye
