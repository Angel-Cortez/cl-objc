\input texinfo
@setfilename cl-objc
@settitle cl-objc

@copying
Documentation for the Common Lisp ObjC Interface, version 1.0.

Copyright @copyright{} 2007 Geoff Cant, Luigi Panzeri

@quotation
Copying and distribution of this file, with or without modification, are
permitted in any medium without royalty provided the copyright notice
and this notice are preserved.
@end quotation
@end copying

@titlepage
@title Common Lisp ObjC Interface

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Common Lisp ObjC Interface Library
 
@insertcopying
@end ifnottex

@menu 
* Introduction::    What is CL-ObjC?
* Tutorial::        Brief Guide to CL-ObjC
* CFFI Bindings::   Using simple wrappers of ObjC FFI
* Lisp Wrappers::   Writing ObjC application using Common Lisp wrappers
* CLOS Wrappers::   The CLOS wrapper to ObjC object system
* Reader Macro::    Using the reader macro to write in ObjC style
* Implementation Notes::
* Examples::
* API Reference::
* Index::           Complete index.
@end menu

@node Introduction
@chapter Introduction

@section What is CL-ObjC?
CL-ObjC is a Common Lisp library whose aims are to allow developers to
use libraries written in the Objective C language, providing a lisp-like
interface towards Objective C conventions.

This manual is a work in progress. If you have difficulty using or
comprehending it please contact @email{cl-objc-devel@@common-lisp.net,
the developers} with details.

@section Status
At the moment CL-ObjC has been tested mainly on x86/64 platform on
Darwin. As CL-ObjC uses CFFI to link with the Objective C runtime
foreign functions, it should not be a problem to use it portably on
other platforms or OSs.

@section Download and installation
You can get the current development version of CL-ObjC from the darcs
repository on @uref{http://common-lisp.net/project/cl-objc/darcs/cl-objc/}

Experimental versions can be also found on
@uref{http://www.innerloop.it/~matley/cl-objc-soc}

@section Installation 
CL-ObjC is packaged using the ASDF library, so once downloaded the code
you should change the asdf:*central-registry* parameter to make asdf
find the cl-objc.asd file, or you can make a symbolic link of it in a
directory already in asdf:*central-registry*.

To build CL-ObjC you need to get a recent (at least from February 2007)
version of CFFI. You can get the development version from the darcs
repository at @uref{http://common-lisp.net/project/cffi/darcs/cffi/}.

In order to work CL-ObjC needs to find the libobjc library. By default
it will search for it in /usr/lib. Change
@lisp{*foreign-library-directories*} if you want to load libobjc from a
different path.

FIXME: tests!

@section Acknowledgments
This project was funded by Google Inc. in the Summer of Code of 2007.

* @email{nem@@lisp.geek.nz,Geoff Cant}: initial author

* @email{matley@@muppetslab.org, Luigi Panzeri}: main developer

* @email{mb@@bese.it}: mentor of the Project

we also thanks the @uref{http://www.lispnyc.org,LispNyC} that approved
and voted this project for funding.

Parts of this manual have be generated by the SB-TEXINFO software.

@node Tutorial
@chapter Tutorial
come nella pagine di openmcl

come si transforma in una un/typed call, usando invoke, qualche
macrology

@section Writing an Hello World application

@section The Currency Converter example
Using NIBS

@node CFFI Bindings
@chapter CFFI Bindings

@section Types
Types Translators

@section Message Sending

@section Getting information about classes and instances

@section Frameworks

@section Structs

@node Lisp Wrappers
@chapter Lisp Wrappers

@node Reader Macro
@chapter Reader Macro

@node CLOS Wrappers
@chapter CLOS Wrappers
To be implemented

@node Implementation Notes
@chapter Implementation Notes

@section Limits
@include ../KNOWN_BUGS.txt

@node Examples
@chapter Examples

@node API Reference
@chapter API Reference

@node Index
@unnumbered Index
@printindex cp
@bye
