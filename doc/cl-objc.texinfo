\input texinfo
@setfilename cl-objc
@settitle cl-objc

@c Some plain TeX macrology to wrap text in \hbox{} only if the text
@c contains no hyphens.
@iftex
@tex
\newif\ifdash
\long\def\dashp#1{\expandafter\setnext#1-\dashphelper}
\long\def\setnext#1-{\futurelet\next\dashphelper}
\long\def\dashphelper#1\dashphelper{
  \ifx\dashphelper\next\dashfalse\else\dashtrue\fi
}
\def\lw#1{\leavevmode\dashp{#1}\ifdash#1\else\hbox{#1}\fi}
@end tex
@end iftex

@c A Texinfo binding for the plain TeX above.  Analogous to Texinfo's
@c @w, but for Lisp symbols.  AFAICT, the comment characters are
@c necessary to prevent treating the newline as a space.
@macro lw{word}
@iftex
@tex
\\lw{\word\}%
@end tex
@end iftex
@ifnottex
\word\@c
@end ifnottex
@end macro

@copying
Documentation for the Common Lisp ObjC Interface, version 1.0.

Copyright @copyright{} 2007 Geoff Cant, Luigi Panzeri

@quotation
Copying and distribution of this file, with or without modification, are
permitted in any medium without royalty provided the copyright notice
and this notice are preserved.
@end quotation
@end copying

@titlepage
@title Common Lisp ObjC Interface

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Common Lisp ObjC Interface Library
 
@insertcopying
@end ifnottex

@menu 
* Introduction::    What is CL-ObjC?
* Tutorial::        Brief Guide to CL-ObjC
* CFFI Bindings::   Using simple wrappers of ObjC FFI
* Lisp Interface::   Writing ObjC application using Common Lisp wrappers
* CLOS Wrappers::   The CLOS wrapper to ObjC object system
* Reader Macro::    Using the reader macro to write in ObjC style
* Implementation Notes::
* Index::           Complete index.
@end menu

@node Introduction
@chapter Introduction

@section What is CL-ObjC?
CL-ObjC is a Common Lisp library whose aims are to allow developers to
use libraries written in the Objective C language, providing a lisp-like
interface towards Objective C conventions.

Actually it is made of 3 different interfaces. 

The first one provided by the package @lw{OBJC-CFFI} expose the CFFI
bindings to the users but allowing them to manage ObjC data through
Common Lisp classes via the CFFI foreign type translators mechanism.

The second one, you can find in the OBJC-READER package, provides a
reader macro that allows user to mix ObjectiveC and Common Lisp syntax.

The last one provided by the package @lw{CL-OBJC} gives to the users the
ability to write application in a more Common Lisp-like way.

This manual is a work in progress. If you have difficulty using or
comprehending it please contact @email{cl-objc-devel@@common-lisp.net,
the developers} with details.

@section Status
At the moment CL-ObjC has been tested mainly on x86/64 platform on
Darwin. As CL-ObjC uses CFFI to link with the Objective C runtime
foreign functions, it should not be a problem to use it portably on
other platforms or OSs.

@section Download and installation
You can get the current development version of CL-ObjC from the darcs
repository on @uref{http://common-lisp.net/project/cl-objc/darcs/cl-objc/}

Experimental versions can be also found on
@uref{http://www.innerloop.it/~matley/cl-objc-soc}

@section Installation 
CL-ObjC is packaged using the ASDF library, so once downloaded the code
you should change the asdf:*central-registry* parameter to make asdf
find the cl-objc.asd file, or you can make a symbolic link of it in a
directory already in asdf:*central-registry*.

To build CL-ObjC you need to get a recent (at least from February 2007)
version of CFFI. You can get the development version from the darcs
repository at @uref{http://common-lisp.net/project/cffi/darcs/cffi/}.

In order to work CL-ObjC needs to find the libobjc library. By default
it will search for it in /usr/lib. Change *foreign-library-directories*
if you want to load libobjc from a different path.

To run tests bundled with CL-ObjC you need the FiveAM test unit
software, then you can eval:

@lisp
(asdf:oos 'asdf:load-op 'cl-objc)
(asdf:oos 'asdf:test-op 'cl-objc)
@end lisp

@section Authors 
@enumerate
* @email{nem@@lisp.geek.nz,Geoff Cant}: initial author
* @email{matley@@muppetslab.org, Luigi Panzeri}: main developer
@end enumerate

@section Acknowledgments
Thanks to the @uref{http://www.lispnyc.org,LispNyC} (that approved and
voted this project) this project was funded by Google Inc. in the Summer
of Code of 2007. We thanks also @email{mb@@bese.it, Marco Baringer}
mentor of the project during the SoC.
Parts of this manual have be generated by the SB-TEXINFO software.

@node Tutorial
@chapter Tutorial
come nella pagine di openmcl

 come si transforma in una un/typed call, usando invoke, qualche
macrology

@section Writing an Hello World application

@section The Currency Converter example
Using NIBS

@node CFFI Bindings
@chapter CFFI Bindings

@section Types
Types Translators

@section API Reference

@subsection Frameworks
@include include/macro-objc-cffi-define-objc-framework.texinfo

@subsection Structs
@include include/fun-objc-cffi-objc-struct-slot-value.texinfo
@include include/macro-objc-cffi-define-objc-struct.texinfo
@include include/fun-objc-cffi-symbol-to-objc-class-name.texinfo
@include include/fun-objc-cffi-objc-class-name-to-symbol.texinfo

@subsection Classes
@include include/fun-objc-cffi-get-class-list.texinfo
@include include/fun-objc-cffi-objc-get-class.texinfo
@include include/fun-objc-cffi-get-class-methods.texinfo
@include include/fun-objc-cffi-get-instance-methods.texinfo
@include include/fun-objc-cffi-class-get-class-method.texinfo
@include include/fun-objc-cffi-class-get-instance-method.texinfo
@include include/fun-objc-cffi-class-has-public-ivars.texinfo
@include include/fun-objc-cffi-super-classes.texinfo
@include include/var-objc-cffi-objc-nil-class.texinfo

@subsection Instance Variables
@include include/fun-objc-cffi-make-ivar.texinfo
@include include/fun-objc-cffi-private-ivar-p.texinfo

@subsection Defining methods and classes at runtime
@include include/fun-objc-cffi-add-objc-class.texinfo
@include include/fun-objc-cffi-ensure-objc-class.texinfo
@include include/macro-objc-cffi-add-objc-method.texinfo

@subsection Instanced Objects
@include include/fun-objc-cffi-objc-nil-object-p.texinfo
@include include/fun-objc-cffi-set-ivar.texinfo
@include include/fun-objc-cffi-get-ivar.texinfo
@include include/var-objc-cffi-objc-nil-object.texinfo
@include include/class-objc-cffi-objc-object.texinfo

@subsection Selectors
@include include/fun-objc-cffi-sel-get-uid.texinfo

@subsection Message Sending
@include include/macro-objc-cffi-untyped-objc-msg-send.texinfo
@include include/macro-objc-cffi-typed-objc-msg-send.texinfo

@subsection Type Parsing
@include include/var-objc-types-typemap.texinfo
@include include/fun-objc-types-parse-objc-typestr.texinfo
@include include/fun-objc-types-encode-types.texinfo
@include include/fun-objc-types-encode-type.texinfo

FIXME: exported accessors need documentation too!

@node Lisp Interface
@chapter Lisp Interface

@section API Reference

@subsection Name Translators
@include include/fun-cl-objc-symbols-to-objc-selector.texinfo
@include include/fun-cl-objc-objc-selector-to-symbols.texinfo
@include include/var-cl-objc-star-acronyms-star.texinfo

@subsection Macrology
@include include/macro-cl-objc-with-object.texinfo
@include include/macro-cl-objc-with-ivar-accessors.texinfo
@include include/macro-cl-objc-slet.texinfo
@include include/macro-cl-objc-slet-star.texinfo
@include include/macro-cl-objc-objc-let.texinfo

@subsection Message Calling
@include include/macro-cl-objc-invoke.texinfo
@include include/fun-cl-objc-selector.texinfo

@subsection Defining method and classes at Runtime
@include include/macro-cl-objc-define-objc-method.texinfo
@include include/macro-cl-objc-define-objc-class.texinfo

@node Reader Macro
@chapter Reader Macro

@include include/var-objc-reader-star-accept-untyped-call-star.texinfo
@include include/fun-objc-reader-restore-readtable.texinfo
@include include/fun-objc-reader-activate-objc-reader-macro.texinfo

@node CLOS Wrappers
@chapter CLOS Wrappers
To be implemented

@node Implementation Notes
@chapter Implementation Notes

@section Limits
@enumerate
@include ../KNOWN_BUGS.txt
@end enumerate

@node Index
@unnumbered Index
@printindex cp
@bye
